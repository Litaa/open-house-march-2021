color = "white",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))# %>%
knitr::opts_chunk$set(echo = TRUE)
leaflet(target) %>%
addTiles() %>%
addPolygons(weight=2,
#label=labels,
# fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))
knitr::opts_chunk$set(echo = TRUE)
leaflet(target) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
# fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
pal <- colorNumeric(palette = "Reds", domain = plotdata$value)
leaflet(target) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
)) %>%
#addProviderTiles(providers$Stamen.Toner) %>%
# addPolygons(
#   label = labels,
#   fillColor = ~pal(plotdata$value),
#   fillOpacity = .8,
#   weight = 2,
#   color = "white",
#   highlight = highlightOptions(
#     weight = 5,
#     color = "black",
#     bringToFront = TRUE,
#     opacity = 0.8
#   )
# ) %>%
addLegend(
pal = pal,
values = ~value,
labels = ~value,
opacity = 1,
title = "PopulationPopulation",
position = "bottomright"
)
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
pal <- colorNumeric(palette = "Reds", domain = plotdata$value)
leaflet(target) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
)) %>%
#addProviderTiles(providers$Stamen.Toner) %>%
# addPolygons(
#   label = labels,
#   fillColor = ~pal(plotdata$value),
#   fillOpacity = .8,
#   weight = 2,
#   color = "white",
#   highlight = highlightOptions(
#     weight = 5,
#     color = "black",
#     bringToFront = TRUE,
#     opacity = 0.8
#   )
# ) %>%
# addLegend(
#   pal = pal,
#   values = ~value,
#   labels = ~value,
#   opacity = 1,
#   title = "PopulationPopulation",
#   position = "bottomright"
# )
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
pal <- colorNumeric(palette = "Reds", domain = plotdata$value)
leaflet(target) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))#%>%
#addProviderTiles(providers$Stamen.Toner) %>%
# addPolygons(
#   label = labels,
#   fillColor = ~pal(plotdata$value),
#   fillOpacity = .8,
#   weight = 2,
#   color = "white",
#   highlight = highlightOptions(
#     weight = 5,
#     color = "black",
#     bringToFront = TRUE,
#     opacity = 0.8
#   )
# ) %>%
# addLegend(
#   pal = pal,
#   values = ~value,
#   labels = ~value,
#   opacity = 1,
#   title = "PopulationPopulation",
#   position = "bottomright"
# )
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
pal <- colorNumeric(palette = "Reds", domain = plotdata$value)
leaflet(plotdata) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
fillColor = ~pal(plotdata$value),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))#%>%
target
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
target %>%
left_join(plotdata, by = c("coutry" = "region"))# %>%
knitr::opts_chunk$set(echo = TRUE)
plotdata <- top5_country %>%
# rename(region = country,
#        value = total) %>%
#mutate(region = tolower(region)) %>%
mutate(country = recode(country,
"United States"    = "USA",
"United Kingdom"    = "UK"))
knitr::opts_chunk$set(echo = TRUE)
plotdata <- top5_country %>%
# rename(region = country,
#        value = total) %>%
#mutate(region = tolower(region)) %>%
mutate(country = recode(country,
"United States"    = "USA",
"United Kingdom"    = "UK"))
plotdata
knitr::opts_chunk$set(echo = TRUE)
data(world.cities)
world
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# make sure to use the latest maps package
# it was recently updated at the time of the answer
library(glue)
labels <- glue("<b>{plotdata$region}</b><br>
Number of Daily Vaccine: {prettyNum(plotdata$value, big.mark = ',')}") %>%
lapply(htmltools::HTML)
#leaflet(df_jabodetabek) %>%
data(world.cities)
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$region)
target %>%
left_join(plotdata, by = c("coutry" = "region"))# %>%
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 9)
library(data.table)
library(dplyr)
library(stringr)
library(ggplot2)
library(plotly)
library(glue)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# read data
vaccine <-  read.csv("country_vaccinations.csv")
head(vaccine,5)
vaccine <- vaccine %>%
mutate(date = as.Date(date),
across(c(country,vaccines,source_name), as.factor))
summary(vaccine['date'])
country_vaccine <- vaccine %>%
distinct(country, vaccines)
vec <- unlist(strsplit(as.character(country_vaccine$vaccines),", "))
vaccine_count <- as.data.frame(vec) %>%
count(vec) %>%
arrange(desc(n))
vaccine_count
vaccine_count2 <- vaccine_count %>%
mutate(label = glue("Vaccine: {vec}
Count: {n}"))
fig <- ggplot(data=vaccine_count2, mapping=aes(x=n, y=reorder(vec,n), text=label)) +
geom_col(aes(fill=n), show.legend = F) +
theme_minimal() +
labs(
title = "Number of Country use Types of Vaccine",
y = "Vaccines",
x = NULL
) +
scale_fill_gradient(low = "seagreen1", high = "purple") +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_line(color = "snow2"))
ggplotly(fig,tooltip = "text")
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines,'Sinovac'))
top5_country <-
head(vaccine %>%
filter(country != 'England') %>%
group_by(country) %>%
summarise(total = sum(daily_vaccinations, na.rm=TRUE)) %>%
arrange(desc(total)), 5)
top5_country
plotdata <- top5_country %>%
mutate(country = recode(country,
"United States"    = "USA",
"United Kingdom"    = "UK"))
plotdata
world <- map("world", fill=TRUE, plot=FALSE)
world_map <- map2SpatialPolygons(world, sub(":.*$", "", world$names))
world_map <- SpatialPolygonsDataFrame(world_map,
data.frame(country=names(world_map),
stringsAsFactors=FALSE),
FALSE)
target <- subset(world_map, country %in% plotdata$country)
target_sf <- sf::st_as_sf(target)
#
target_sf <- target_sf %>%
left_join(plotdata, by = c("country"))# %>%
pal <- colorNumeric(palette = "YlOrRd", domain = target_sf$total)
labels <- glue("<b>{target_sf$country}</b><br>
Number of Daily Vaccine: {prettyNum(target_sf$total, big.mark = ',')}") %>%
lapply(htmltools::HTML)
leaflet(target_sf) %>%
addTiles() %>%
addPolygons(weight=2,
label=labels,
fillColor = ~pal(target_sf$total),
fillOpacity = .8,
color = "grey",
highlight = highlightOptions(
weight = 2,
color = "black",
bringToFront = TRUE,
opacity = 0.8
))%>%
addLegend(
pal = pal,
values = ~total,
labels = ~total,
opacity = 1,
title = "Vaccine Number :",
position = "bottomright"
)
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines,'Sinovac))
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines,'Sinovac'))
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 9)
library(data.table)
library(dplyr)
library(stringr)
library(ggplot2)
library(plotly)
library(glue)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# read data
vaccine <-  read.csv("country_vaccinations.csv")
head(vaccine,5)
vaccine <- vaccine %>%
mutate(date = as.Date(date),
across(c(country,vaccines,source_name), as.factor))
summary(vaccine['date'])
country_vaccine <- vaccine %>%
distinct(country, vaccines)
vec <- unlist(strsplit(as.character(country_vaccine$vaccines),", "))
vaccine_count <- as.data.frame(vec) %>%
count(vec) %>%
arrange(desc(n))
vaccine_count
vaccine_count2 <- vaccine_count %>%
mutate(label = glue("Vaccine: {vec}
Count: {n}"))
fig <- ggplot(data=vaccine_count2, mapping=aes(x=n, y=reorder(vec,n), text=label)) +
geom_col(aes(fill=n), show.legend = F) +
theme_minimal() +
labs(
title = "Number of Country use Types of Vaccine",
y = "Vaccines",
x = NULL
) +
scale_fill_gradient(low = "seagreen1", high = "purple") +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_line(color = "snow2"))
ggplotly(fig,tooltip = "text")
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines,'Sinovac'))
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 9)
library(data.table)
library(dplyr)
library(stringr)
library(ggplot2)
library(plotly)
library(glue)
library(sp)
library(maps)
library(maptools)
library(leaflet)
# read data
vaccine <-  read.csv("country_vaccinations.csv")
head(vaccine,5)
vaccine <- vaccine %>%
mutate(date = as.Date(date),
across(c(country,vaccines,source_name), as.factor))
summary(vaccine['date'])
country_vaccine <- vaccine %>%
distinct(country, vaccines)
vec <- unlist(strsplit(as.character(country_vaccine$vaccines),", "))
vaccine_count <- as.data.frame(vec) %>%
count(vec) %>%
arrange(desc(n))
vaccine_count
vaccine_count2 <- vaccine_count %>%
mutate(label = glue("Vaccine: {vec}
Count: {n}"))
fig <- ggplot(data=vaccine_count2, mapping=aes(x=n, y=reorder(vec,n), text=label)) +
geom_col(aes(fill=n), show.legend = F) +
theme_minimal() +
labs(
title = "Number of Country use Types of Vaccine",
y = "Vaccines",
x = NULL
) +
scale_fill_gradient(low = "seagreen1", high = "purple") +
theme(panel.background = element_rect(fill = "white"),
panel.grid = element_line(color = "snow2"))
ggplotly(fig,tooltip = "text")
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines, 'Sinovac'))
# additional: conditional subsetting
country_vaccine %>%
filter(str_detect(vaccines,'Sinovac'))
# additional: conditional subsetting
country_vaccine %>% filter(str_detect(vaccines, 'Sinovac'))
